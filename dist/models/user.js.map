{"version":3,"sources":["../../src/models/user.js"],"names":["mongoose","require","validator","bcrypt","jwt","userSchema","Schema","username","type","String","required","trim","firstname","lastname","email","unique","lowercase","validate","value","isEmail","Error","password","minlength","toLowerCase","includes","country","street","appartment","city","province","postalcode","phone","level","Number","default","cartId","wishlistId","ip","current","tokens","token","timestamps","statics","findByCredentials","User","findOne","user","compare","isMatch","methods","generateJWT","sign","_id","toString","concat","save","setIp","req","header","connection","remoteAddress","split","slice","pre","next","isModified","hash","model","module","exports"],"mappings":"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","file":"user.js","sourcesContent":["const mongoose = require('mongoose')\nconst validator = require('validator')\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken')\n\n\nconst userSchema = new mongoose.Schema({\n    \n    username: {\n        type: String,\n        required: true,\n        trim: true\n    },\n    firstname: {\n        type: String,\n        required: true,\n        trim: true\n    },\n    lastname: {\n        type: String,\n        required: true,\n        trim: true\n    },\n    email: {\n        type: String,\n        unique: true,\n        required: true,\n        trim: true,\n        lowercase: true,\n        validate(value) {\n            if (!validator.isEmail(value)) {\n                throw new Error('Email is invalid')\n            }\n        }\n    },\n    password: {\n        type: String,\n        required: true,\n        trim: true,\n        minlength: 7,\n        validate(value) {\n            if (value.toLowerCase().includes('password')) {\n                throw new Error('Password cannot include the word password')\n            }\n        }\n    },\n    country: {\n        type: String,\n        required: true,\n        trim: true\n    },\n    street: {\n        type: String,\n        required: true,\n        trim: true\n    },\n    appartment: {\n        type: String,\n        required: false,\n        trim: true\n    },\n    city: {\n        type: String,\n        required: true,\n        trim: true\n    },\n    province: {\n        type: String,\n        required: true,\n        trim: true\n    },\n    postalcode: {\n        type: String,\n        required: true,\n        trim: true\n    },\n    phone: {\n        type: String,\n        required: false,\n        trim: true\n    },\n    level: {\n        type: Number,\n        default: false,\n        required: true\n    },\n    cartId: {\n        type: String,\n        default: false,\n        required: false\n    },\n    wishlistId: {\n        type: String,\n        default: false,\n        required: false\n    },\n    ip:[{\n        current:{\n            type: String,\n            required: true\n        }\n    }],\n    \n    tokens:[{\n        token:{\n            type: String,\n            required: true\n        }\n    }]\n\n},{timestamps: true})\n\nuserSchema.statics.findByCredentials = async (email, password) => {\n    const user = await User.findOne({email: email})\n    if(!user){\n        throw new Error('Unable to login')\n    }\n    const isMatch = await bcrypt.compare(password, user.password)\n    if(!isMatch){\n        throw new Error('Unable to login')\n    }\n    return user\n}\nuserSchema.methods.generateJWT = async function() {\n    const user = this\n    const token = jwt.sign({_id: user._id.toString()}, 'matwazhere')\n    user.tokens = user.tokens.concat({ token: token})\n    await user.save()\n    return token\n}\nuserSchema.methods.setIp = async function(req) {\n    const user = this\n    let ip = req.header('x-forwarded-for') || req.connection.remoteAddress;\n    ip = ip.split(':').slice(-1);\n    user.ip = user.ip.concat({ current: ip})\n    await user.save()\n    return user\n}\nuserSchema.pre('save', async function(next){\n    const user = this\n    if(user.isModified('password')){\n        user.password = await bcrypt.hash(user.password, 8)\n    }\n\n    next()\n})\n\nconst User = mongoose.model('User', userSchema)\n\nmodule.exports = User\n"]}