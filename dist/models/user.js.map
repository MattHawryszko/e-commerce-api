{"version":3,"sources":["../../src/models/user.js"],"names":["mongoose","require","validator","bcrypt","jwt","userSchema","Schema","name","type","String","required","trim","email","unique","lowercase","validate","value","isEmail","Error","password","minlength","toLowerCase","includes","age","Number","default","admin","Boolean","tokens","token","statics","findByCredentials","User","findOne","user","compare","isMatch","methods","generateJWT","sign","_id","toString","concat","save","pre","next","isModified","hash","model","module","exports"],"mappings":"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","file":"user.js","sourcesContent":["const mongoose = require('mongoose')\nconst validator = require('validator')\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken')\n\n\nconst userSchema = new mongoose.Schema({\n    name: {\n        type: String,\n        required: true,\n        trim: true\n    },\n    email: {\n        type: String,\n        unique: true,\n        required: true,\n        trim: true,\n        lowercase: true,\n        validate(value) {\n            if (!validator.isEmail(value)) {\n                throw new Error('Email is invalid')\n            }\n        }\n    },\n    password: {\n        type: String,\n        required: true,\n        trim: true,\n        minlength: 7,\n        validate(value) {\n            if (value.toLowerCase().includes('password')) {\n                throw new Error('Password cannot include the word password')\n            }\n        }\n    },\n\n    age: {\n        type: Number,\n        default: 0,\n        validate(value) {\n            if (value < 0) {\n                throw new Error('Age must be a postive number')\n            }\n        }\n    },\n    admin: {\n        type: Boolean,\n        default: false,\n        required: true\n    },\n    tokens:[{\n        token:{\n            type: String,\n            required: true\n        }\n    }]\n\n})\n\nuserSchema.statics.findByCredentials = async (email, password) => {\n    const user = await User.findOne({email: email})\n    if(!user){\n        throw new Error('Unable to login')\n    }\n    const isMatch = await bcrypt.compare(password, user.password)\n    if(!isMatch){\n        throw new Error('Unable to login')\n    }\n    return user\n}\nuserSchema.methods.generateJWT = async function() {\n    const user = this\n    const token = jwt.sign({_id: user._id.toString()}, 'matwazhere')\n    user.tokens = user.tokens.concat({ token: token})\n    await user.save()\n    return token\n}\nuserSchema.pre('save', async function(next){\n    const user = this\n\n    if(user.isModified('password')){\n        user.password = await bcrypt.hash(user.password, 8)\n    }\n\n    next()\n})\n\nconst User = mongoose.model('User', userSchema)\n\nmodule.exports = User\n"]}